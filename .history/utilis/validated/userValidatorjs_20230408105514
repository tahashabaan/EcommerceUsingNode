const slugify = require('slugify');
const { check, body } = require('express-validator');
const validatorMiddleware = require('../../middlewares/errorMiddleware');
const Category = require('../../modlas/catagory');
const SubCategory = require('../../modlas/subcatagory');
const User = require('../../modlas/userModal');


exports.createUserValidator = [
  check('name')
    .notEmpty()
    .withMessage('Product required')
    .trim()
    .custom((val, { req }) => {
      req.body.slug = slugify(val);
      return true;
    }),
  check('email')
    .isEmail()
    .withMessage('email is not  valid')
    .notEmpty()
    .withMessage('email is required')
    .custom(val =>  {
      User.find({email: val}).then(user =>)
    } ),

  check('password')
    .notEmpty()
    .withMessage('password is required')
    .isLength({ min: 6 })
    .withMessage('min password is 6 characters'),
  check('profileImage')
    .notEmpty()
    .withMessage('profile Image is required '),
  
  check('price')
    .notEmpty()
    .withMessage('Product price is required')
    .isNumeric()
    .withMessage('Product price must be a number')
    .isLength({ max: 32 })
    .withMessage('To long price'),
  check('priceAfterDiscount')
    .optional()
    .isNumeric()
    .withMessage('Product priceAfterDiscount must be a number')
    .toFloat()
    .custom((value, { req }) => {
      if (req.body.price <= value) {
        throw new Error('priceAfterDiscount must be lower than price');
      }
      return true;
    }),

  check('colors')
    .optional()
    .isArray()
    .withMessage('availableColors should be array of string'),
  check('imageCover').notEmpty().withMessage('Product imageCover is required'),
  check('images')
    .optional()
    .isArray()
    .withMessage('images should be array of string'),
  check('catagory')
    .notEmpty()
    .withMessage('Product must be belong to a category')
    .isMongoId()
    .withMessage('Invalid ID formate')
    .custom((cataegoryId) =>
      Category.findById(cataegoryId).then((category) => {
        if (!category) {
          return Promise.reject(
            new Error(`No category for this id: ${cataegoryId}`)
          );
        }
      })
    ),

  check('subcatagory')
    .optional()
    .isMongoId()
    .withMessage('Invalid ID formate')
    //{ _id: { $exists: true, $in: subcategoriesIds } }
    .custom((subcatagoryId) =>
      SubCategory.find({_id:{ $exists: true, $in: subcatagoryId}}).then(
        (result) => {
          if (result.length < 1 || result.length !== subcatagoryId.length) {
            return Promise.reject(new Error(`Invalid subcategories Ids`));
          }
        }
      )
    ).custom((val, { req }) =>
      SubCategory.find({ catagory: req.body.catagory }).then(
        (subcategories) => {
          const subCategoriesIdsInDB = [];
          subcategories.forEach(subCategory => {
            subCategoriesIdsInDB.push(subCategory.id.toString());
          })
          const checker = (target, arr) => target.every((v) => arr.includes(v));
          if(!checker(val, subCategoriesIdsInDB)) {
                return Promise.reject(
                  new Error(`subcategories not belong to category`)
                );
              }
        }
      )
    ),

  check('brand').optional().isMongoId().withMessage('Invalid ID formate'),
  check('ratingsAverage')
    .optional()
    .isNumeric()
    .withMessage('ratingsAverage must be a number')
    .isLength({ min: 1 })
    .withMessage('Rating must be above or equal 1.0')
    .isLength({ max: 5 })
    .withMessage('Rating must be below or equal 5.0'),
  check('ratingsQuantity')
    .optional()
    .isNumeric()
    .withMessage('ratingsQuantity must be a number'),

  validatorMiddleware,
];

exports.getProductValidator = [
  check('id').isMongoId().withMessage('Invalid ID formate'),
  validatorMiddleware,
];

exports.updateProductValidator = [
  check('id').isMongoId().withMessage('Invalid ID formate'),
  body('title')
    .optional()
    .custom((val, { req }) => {
      req.body.slug = slugify(val);
      return true;
    }),
  validatorMiddleware,
];

exports.deleteProductValidator = [
  check('id').isMongoId().withMessage('Invalid ID formate'),
  validatorMiddleware,
];