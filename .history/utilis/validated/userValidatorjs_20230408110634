const slugify = require('slugify');
const { check, body } = require('express-validator');
const validatorMiddleware = require('../../middlewares/errorMiddleware');
const Category = require('../../modlas/catagory');
const SubCategory = require('../../modlas/subcatagory');
const User = require('../../modlas/userModal');


exports.createUserValidator = [
  check('name')
    .notEmpty()
    .withMessage('Product required')
    .trim()
    .custom((val, { req }) => {
      req.body.slug = slugify(val);
      return true;
    }),
  check('email')
    .isEmail()
    .withMessage('email is not  valid')
    .notEmpty()
    .withMessage('email is required')
    .custom(val =>  {
      User.find({email: val}).then( user => {
         if (user) 
           return Promise.reject(new Error('E-mail already in user'))
      })
    }),

  check('password')
    .notEmpty()
    .withMessage('password is required')
    .isLength({ min: 6 })
    .withMessage('min password is 6 characters')
    .custom((val, {req}) => {
      if (val !== req.body.passwordConfirm)
       return Promise.reject(new Error('password not confirmed'))
    }),
  check('passwordConfirm')
    .notEmpty()
    .withMessage('passwordConfirm is required '),
  
    check('phone')
    .optional()
    .isMobilePhone(['ar-EG', 'ar-SA'])
    .withMessage('Invalid phone number only accepted Egy and SA Phone numbers'),

  check('priceAfterDiscount')
    .optional()
    .isNumeric()
    .withMessage('Product priceAfterDiscount must be a number')
    .toFloat()
    .custom((value, { req }) => {
      if (req.body.price <= value) {
        throw new Error('priceAfterDiscount must be lower than price');
      }
      return true;
    }),

  check('colors')
    .optional()
    .isArray()
    .withMessage('availableColors should be array of string'),
  check('imageCover').notEmpty().withMessage('Product imageCover is required'),
  check('images')
    .optional()
    .isArray()
    .withMessage('images should be array of string'),
  

  

  validatorMiddleware,
];

exports.getProductValidator = [
  check('id').isMongoId().withMessage('Invalid ID formate'),
  validatorMiddleware,
];

exports.updateProductValidator = [
  check('id').isMongoId().withMessage('Invalid ID formate'),
  body('title')
    .optional()
    .custom((val, { req }) => {
      req.body.slug = slugify(val);
      return true;
    }),
  validatorMiddleware,
];

exports.deleteProductValidator = [
  check('id').isMongoId().withMessage('Invalid ID formate'),
  validatorMiddleware,
];